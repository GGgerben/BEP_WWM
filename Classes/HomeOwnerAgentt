class Agent:
    def __init__(self, ID, wealth, risk_perception, experience_level,
                 self_efficacy, outcome_efficacy, intention):
        """
        Represents a household agent.

        Parameters:
        -----------
        ID : int
            Unique identifier per agent.
        wealth : float
            Initial budget (€), determined by social class (rijk/gemiddeld/arm).
        risk_perception : float
            Perceived flood probability and damage risk (0–1).
        experience_level : str
            Flood experience: 'Nooit', 'Een keer', or 'Vaker'.
        self_efficacy : float
            Belief in own ability to implement measures (0–1).
        outcome_efficacy : float
            Belief that measures effectively reduce damage (0–1).
        intention : float
            Motivational level derived from PMT and MAP (0–1).
        """

        self.ID = ID
        self.wealth = wealth
        self.risk_perception = risk_perception
        self.experience_level = experience_level
        self.self_efficacy = self_efficacy
        self.outcome_efficacy = outcome_efficacy
        self.intention = intention

        # Dynamic attributes updated during simulation
        self.adopted_measures = []     # List of Measure objects
        self.satisfaction = 0.0        # Updated after each round
        self.damage_history = []       # List of booleans (True = flooded)
    
    def __repr__(self):
        return (f"Agent(ID={self.ID}, Wealth={self.wealth}, "
                f"Risk={self.risk_perception}, Exp='{self.experience_level}', "
                f"Intention={self.intention})")
